// <auto-generated />
using System;
using EvOil.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EvOil.Persistence.Migrations
{
    [DbContext(typeof(EvOilDatabaseContext))]
    partial class EvOilDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EvOil.Domain.Models.Evaluation", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("OilId")
                        .HasColumnType("int");

                    b.Property<float>("Bitter")
                        .HasColumnType("real");

                    b.Property<float>("Burned")
                        .HasColumnType("real");

                    b.Property<int?>("EvaluationSessionsId")
                        .HasColumnType("int");

                    b.Property<float>("Frosted")
                        .HasColumnType("real");

                    b.Property<float>("Fruity")
                        .HasColumnType("real");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<float>("Inflamed")
                        .HasColumnType("real");

                    b.Property<float>("Moldy")
                        .HasColumnType("real");

                    b.Property<float>("Sour")
                        .HasColumnType("real");

                    b.Property<float>("Spicy")
                        .HasColumnType("real");

                    b.HasKey("UserId", "OilId");

                    b.HasIndex("EvaluationSessionsId");

                    b.HasIndex("OilId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("EvOil.Domain.Models.EvaluationSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("OilId")
                        .HasColumnType("int");

                    b.Property<int>("TypeOfSession")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OilId");

                    b.ToTable("EvaluationSessions");
                });

            modelBuilder.Entity("EvOil.Domain.Models.Oil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CodeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CodeName")
                        .IsUnique();

                    b.ToTable("Oils");
                });

            modelBuilder.Entity("EvOil.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Type of User")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Type of User").HasValue("User");
                });

            modelBuilder.Entity("EvOil.Domain.Models.Evaluator", b =>
                {
                    b.HasBaseType("EvOil.Domain.Models.User");

                    b.HasDiscriminator().HasValue("Evaluator");
                });

            modelBuilder.Entity("EvOil.Domain.Models.Organizer", b =>
                {
                    b.HasBaseType("EvOil.Domain.Models.User");

                    b.HasDiscriminator().HasValue("Organizer");
                });

            modelBuilder.Entity("EvOil.Domain.Models.Trainee", b =>
                {
                    b.HasBaseType("EvOil.Domain.Models.User");

                    b.HasDiscriminator().HasValue("Trainee");
                });

            modelBuilder.Entity("EvOil.Domain.Models.Evaluation", b =>
                {
                    b.HasOne("EvOil.Domain.Models.EvaluationSession", "EvaluationSessions")
                        .WithMany("Evaluations")
                        .HasForeignKey("EvaluationSessionsId");

                    b.HasOne("EvOil.Domain.Models.Oil", "Oils")
                        .WithMany("Evaluations")
                        .HasForeignKey("OilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EvOil.Domain.Models.User", "Users")
                        .WithMany("Evaluations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EvaluationSessions");

                    b.Navigation("Oils");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("EvOil.Domain.Models.EvaluationSession", b =>
                {
                    b.HasOne("EvOil.Domain.Models.Oil", null)
                        .WithMany("EvaluationSessions")
                        .HasForeignKey("OilId");
                });

            modelBuilder.Entity("EvOil.Domain.Models.EvaluationSession", b =>
                {
                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("EvOil.Domain.Models.Oil", b =>
                {
                    b.Navigation("EvaluationSessions");

                    b.Navigation("Evaluations");
                });

            modelBuilder.Entity("EvOil.Domain.Models.User", b =>
                {
                    b.Navigation("Evaluations");
                });
#pragma warning restore 612, 618
        }
    }
}
